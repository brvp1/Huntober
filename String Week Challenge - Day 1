/*
This week we will be discovering hidden messages by manipulating a given string. Your solutions should account for any non-empty string. On Friday we'll combine our functions to decode a message.

Oh no! How did this happen?! Somehow similar-looking numbers and letters have been confused in our document. Someone may have been messing around writing naughty words on a calculator. We need to get them back to normal.

Below, find the mix-ups that have been made. Note: the confusion happened in both directions and was case-sensitive.


COPY
'0' <-> 'O'      '5' <-> 'S'
'1' <-> 'I'      '6' <-> 'G'
'2' <-> 'Z'      '7' <-> 'L'
'3' <-> 'E'      '8' <-> 'B'
'4' <-> 'h'      '9' <-> 'q'
As an example, here is how a string looks before and after the characters are fixed:


COPY
"PR0-T1P #hqB: 1T'5 N1C3 T0 5AY H3770." 
// implement fix function -> 
"PRO-TIP#498: IT'S NICE TO SAY HELLO."
*/

// P: We are given a non- empty string
// R: Return the decoded string
// E: "PR0-T1P #hqB: 1T'5 N1C3 T0 5AY H3770." -> "PRO-TIP#498: IT'S NICE TO SAY HELLO."
// P: Create an object that holds the "key" and the corresponding value
//     Declare an empty string
//    Iterate through the messed up string, if it is a key -> concat value to a string variable else if it is a value concat key to string variable else concat char to key variable.
// Return empty string variable.

function decode(string) {
  let final = "";
  const INSTRUCTIONS = {
    0: 'O',
    1: 'I',
    2: 'Z',
    3: 'E',
    4: 'h',
    5: 'S',
    6: 'G',
    7: 'L',
    8: 'B',
    9: 'q'
  }

  for (let char of string) {
    let keys = Object.keys(INSTRUCTIONS);
    let values = Object.values(INSTRUCTIONS);
    
    if (keys.includes(char)){
      final += values[keys.indexOf(char)];
      
    } else if (values.includes(char)){
      final += keys[values.indexOf(char)];
    } else {
      final += char;
    }
  }
  return final;
}
